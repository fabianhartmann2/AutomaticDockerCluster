#System language
lang en_GB
#Language modules to install
langsupport en_GB
#System keyboard
keyboard ch_legacy
#System mouse
mouse
#System timezone
timezone Europe/Zurich
#Root password
rootpw --disabled
#Initial user
user administrator --fullname "Administrator" --iscrypted --password 1234
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr
zerombr
clearpart --all --initlabel
####################################
part / --fstype ext4 --size=8000
part /boot --fstype ext4 --size=500
part /home --fstype ext4 --size=5000
part /tmp --fstype ext4 --size=10000
part /usr --fstype ext4 --size=5000
part /srv --fstype ext4 --size=1000
part /opt --fstype ext4 --size=5000
part swap --size=1024
part /var --fstype ext4 --size=1 --grow

# hack around Ubuntu kickstart bugs
preseed partman-lvm/confirm_nooverwrite boolean true
preseed partman-auto-lvm/no_boot        boolean true
#System authorization infomation
auth  --useshadow  --enablemd5
#Network information
network --bootproto=dhcp --device=eth0
#Firewall configuration
firewall --disabled --trust=eth0
#Automatic Security Updates
preseed pkgsel/update-policy select unattended-upgrades
#Do not configure the X Window System
skipx
%packages
ca-certificates
openssl
openssh-server
curl
open-vm-tools --no-install-recommends
xubuntu-desktop
%post
usermod -aG docker administrator
apt-get update
apt-get upgrade -y
hostname $(nslookup $(ifconfig  eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}') | grep name | awk '{print $4}' | sed -e 's/[.].*$//')
cat <<EOF > /etc/init.d/bootup
#! /bin/sh
# /etc/init.d/bootup
### BEGIN INIT INFO
# Provides:          Docker and Rancher to start
# Required-Start:    \$local_fs \$network \$remote_fs
# Required-Stop:     \$local_fs \$network \$remote_fs
# Should-Start:      \$NetworkManager
# Should-Stop:       \$NetworkManager
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts Docker installs Rancher
# Description:       starts Docker installs Rancher
### END INIT INFO

# user
RUN_AS=root

case "\$1" in
  start)
    apt-get update
    apt-get upgrade -y
    sourceurl="dev.configure.docker.example.local"
    if ! [ "\$(dig  -t txt \$sourceurl | grep "ANSWER SECTION")" == "" ]; then
	dockerversionscript=\$(dig  -t txt \$sourceurl | grep DOCKERSCRIPTVERSION |  tr '" "' '\n' | grep DOCKERSCRIPTVERSION | sed 's/^.*=//')
        agentversion=\$(dig  -t txt \$sourceurl | grep AGENT |  tr '" "' '\n' | grep AGENT | sed 's/^.*=//')
        rancherurl=\$(dig  -t txt \$sourceurl | grep RANCHERURL |  tr '" "' '\n' | grep RANCHERURL | sed 's/^.*=//')
        rancherssl=\$(dig  -t txt \$sourceurl | grep ENCRYPTED |  tr '" "' '\n' | grep ENCRYPTED | sed 's/^.*=//')
        rancherport=\$(dig  -t txt \$sourceurl | grep RANCHERPORT |  tr '" "' '\n' | grep RANCHERPORT | sed 's/^.*=//')
        jointoken=\$(dig  -t txt \$sourceurl | grep JOINTOKEN |  tr '" "' '\n' | grep JOINTOKEN | sed 's/^.*=//')
        if [ "\$rancherssl" = "YES" ]; then
            protocol="https"
        else
            protocol="http"
            echo "NO SSL" >> /var/log/rancherdeploy.log
        fi
        echo "URL & PORT:       \$rancherurl:\$rancherport" > /var/log/rancherdeploy.log
        echo "TOKEN:    \$jointoken" >> /var/log/rancherdeploy.log
        echo "PROTOCOL: \$protocol" >> /var/log/rancherdeploy.log 
	curl -fsSL https://releases.rancher.com/install-docker/\$dockerversionscript | sh
        docker run -d -v /var/lib/mysql:/var/lib/mysql --restart=always -p \$rancherport:8080 rancher/server
	usermod -aG docker administrator
        #rm -f /etc/init.d/bootup    
     fi
    ;;
  stop)
    echo "nothingtodo"
    ;;
  *)
    echo "Usage: /etc/init.d/bootup {start|stop}"
    exit 1
    ;;
esac

exit 0
EOF

chmod 755 /etc/init.d/bootup
update-rc.d bootup defaults
reboot
